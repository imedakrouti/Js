console:
ecrire console directement
console.log("");
console.table("");
console.warn("");
console.time('test');
	traitements;
console.timeend('test')  //temp d'execusion les traitements

		***var let const***
// A variable can contain: letters, numbers, or underscores
// it cannot start with a number
// variables with more than 1 name
var firstName = 'Juan Pablo'; // CamelCase
var first_name = 'Juan Pablo'; //underscore
var FirstName = 'Juan Pablo'; // pascal case
  --let--
we can't redeclare the varable (resign)
	--const--
// You cannot re-assign the value(costanta)
// The values from an object can be re assigned.
const car = {
    name: 'Mustang',
    motor: 6.5
}
console.log(car);

car.name = 'Audi';
console.log(car);
// Same with arrays
const numbers = [1,2,3,4,5];

console.log(numbers);

numbers[3] = 3;
console.log(numbers);

numbers.push(6);
console.log(numbers);

// But you cannot re assign the whole array

numbers = [1,2,3];

	--data type
/ Javascript is a dinamically typed language
// You don't specify the data type
// the data type is defined by the value and not the variable

// The same variable can hold different data types and change
// while the program is executing

// In languages such as C, Java or C# you have to specify the data type

// In JavaScript you can add that functionality with TypeScript

// TypeOf operator is used to retrieve the data type

// In JavaScript a variable can change the data type

let name = 'Juan'
name = 20;
name = true;
name = undefined;
name = Symbol('Hello');
console.log(typeof name);

// Let's review the other data types
const name = "Juan";
console.log(typeof name );

// Numbers
let number;

number =  20;
console.log(typeof number );
number = "20";
console.log(typeof number );

// Boolean
let learningJS = true;
console.log(typeof learningJS );

// Null
// will return object
let bankSavings = null;
console.log(typeof bankSavings );

// Undefined
let person;
console.log(typeof person );

// Symbol (ES6)
let symbolES6 = Symbol('this is a symbol');
console.log(typeof symbolES6);

// Reference (Objetos)
// Arrays
let languages = ['HTML5', 'JS', 'PHP'];
console.log(typeof languages);

// Objects
let person = {
    name: 'Juan',
    city: 'mexico'
}
console.log(typeof person);

// Dates
let today = new Date();
console.log(typeof today);
// null type:object
//aray type:object
//date type:object
//undefind: variable without value			
const learning = 'Learning JavaScript is great!';
let output;
			STRING METHODS
// length
output = learning.length ;

// concat
output = learning.concat(" ", " and fun");

// uppercase
output = learning.toUpperCase();

// lowercase
output = learning.toLowerCase();

// indexOf // indexof -1 doesn't exist
output = learning.indexOf('JavaScript');
output = learning.indexOf('PHP');

// substring()
output = learning.substring(0,10);
output = learning.substring(2,10);

// Substring from the end
output = learning.substring( learning.length - 4 );

// slice()
// negative number will start from the end
output = learning.slice(0,4);
output = learning.slice(-3);

// Split
output = learning.split(" ");

// Another wxample
const hobbies = 'read, walk, listen music, write, learn to program';
output = hobbies.split(", ");

// Replace.
output = learning.replace('JavaScript', 'Modern JavaScript');

// includes
output = learning.includes('JavaScript');
output = learning.includes('PHP');

// repeat
let greet =  "hello ";
    output = greet.repeat(3);

console.log(output);

COMPARISON OPERATORS
   

console.log( 1 > 2);

console.log( 1 < 2);

// JavaScript can make comparisons between characters
console.log('a' < 'b');

console.log('a' > 'b' );

console.log('Z' < 'a');

// Equality Operator
console.log(2 == '2');

// Strict comparison Operator (This will check the typeof also)
console.log(2 === '2');


console.log( 2 == 3);

// Not Equals
console.log( 2 != 2);
console.log('hello' != ' hello');

// Comparison between null & undefined
console.log(null == undefined);
console.log(null === undefined);


    

CONVERT STRINGS TO NUMBERS
   

let number1 = "50",
    number2 = 10,
    number3 = 'nine';


console.log(number1 + number2);

// Convert number1 to Number
console.log(Number(number1) + number2);
console.log(parseInt(number1) + number2);

// Convert number 3
console.log(number3);

// This will concatenate the value
console.log(number1 + number2);

// But this will substract the value
console.log(number1 - number2);

// Another Methods
let number = "20";
number = Number("20");
number = Number("20.20102");
number = Number(true);
number = Number(false);
number = Number(null);
number = Number("Hello world");
number = Number([1,2,3,4]);

console.log(number);
console.log(typeof number);

// ParseInt & ParseFloat

number = parseInt("100");
number = parseInt("100.20");
number = parseFloat("100.20");


// ToFixed just for numbers
let number1 = "1209139";
let number2 = 1209139.101213;
console.log(number1.toFixed(4) );
console.log(number2.toFixed(4) );

   

CONVERTING DATA TO STRING
   

// Numbers to string

let number = 90210,
    output;

output = String(number);

// Anothers
dato = 4+4;
dato = "4" + "4";


console.log(output);
console.log(output.length);
console.log(typeof output);





// bool to string
output = true;
output = String(true);

// date to string
output = new Date();
output = String( new Date() );

// array to string
output = String( [1,2,3,4] );

// toString()

output = 20.toString() ;
output = true.toString() ;
output = [1,2,3,4].toString() ;

// null cannot be converted since it doesn't exist
output = null.toString() ;


    
	//Template leterals /template strings

we use string template to concatenate strings with variable using interpolation ${}
const product1 = 'Pizza';
const price1 = 30;
const product2 = 'Hamburger';
const price2 = 40;

// Old Method
let html;
html  = '<ul>'+
        '<li>Item: ' + product1 + '</li>' +
        '<li>Price: $ ' + price1 + '</li>' +
        '<li>Item: ' + product2 + '</li>' +
        '<li>Price: $ ' + price2 + '</li>' +
        '<li>Total: $' + (price1 + price2) + '</li>';
        '</ul>';

// Template Strings

html = `
    <ul>
        <li>Item: ${product1}</li>
        <li>Price: ${price1}</li>
        <li>Item: ${product2}</li>
        <li>Price: ${price2}  </li>
        <li>Total: ${total(price1, price2)}</li>
    </ul>
`;

function total(param1, param2) {
    return param1 + param2;
}

// HTML to inject the code

let app = document.querySelector('#app');
app.innerHTML = html ;
